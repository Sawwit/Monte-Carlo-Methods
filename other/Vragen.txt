Efficientere methode van force berekenen (matrix vermenigvuldiging in hogere dim?)


Vermenigvuldiging van 4-D matrices kan een nieuwe 4-D matrix geven door sommatie over 2 indices (bij beiden matrices dezelfde) Maar welke twee? En moeten we dit doen of for-loops gebruiken?

numpy functie eentje opschuiven. shift functie voor neighbour sum. 

lambda andere waarde misschien: Deze lambda is beetje out of the blue -> Waar ligt de focus. Meerdere lambda mogelijk. want fysischse correlatie lengte proberen constant te houden. Enige is vrije veld -> je gaat geen mass scale vinden.

Detailed balance: Kan via plotje en heatbath. Even goed over nadenken -> liefst quantitative check. 

Ook autocorrelatie opslaan in cpu tijd en stappen. 







_______________________________________________________
13-12

Idee: 
- Check cluster
- Finetuning script voor zowel heatbath als Hybrid van de parameters (delta en eps/tau) -> Subtiele verandering in dit plan:
1. Eerst los finetuning script, wat op basis van +- 300 sweeps bepaalt of "we wegkomen" van de initiele toestand voor meerdere sizes en lambdas
2. Bepaling van Equilibation time door middel van meerdere initiele toestanden; begin met eps en tau van hiervoor. Wanneer hier vrij hoge time wordt gevonden (let op: doe time keer bepaalde constante) of significant verkeerde acceptatie percentage -> stap lager in eps en tau -> nieuwe bepaling Equilibration time
3. Equilibratie fase is nu dus direct voltooid, maar mogelijk dat vorige stap wel verandering in gebruikte eps en tau meegeeft -> Dit doorgeven aan resultaten van finetuning script
4. Finetuning op delta (rond de +- 300 sweeps -> zoek naar 50 procent acceptatie)
5. Measurements voor beide uitvoeren in zelfde script -> Minder Equil fases benodigd, dus efficienter. 
- Voor verslag: wanneer Hybrid t.o.v. Heatbath?  

Vragen:
- Parallelisatie ideeen? 
- runtime vs autocorrelatie? Wat gebruiken voor efficientie?
- Finetuning van eps/tau  idee 300 -> 



Presentatie:
Double counting
matrix stap voor optimalisatie


batch script voorkeur: -w [nodename] (110 tm 113) 